dump /h
dump 
dump memory 
dump memory s
dump memory 100
dump memory 100 1000
dump memory 100 100 100
disassemble 
dumpargs
disassemble main
regs
l
l
src
so
so
so
stack 32 -8
x 0x7fffffffde00
disassemble main
start
disas
disas
disas
so
so --help
so
s
so
so
so
so
so
so
so
so
n 
show-flags off
set show-flags off
set show-flags off
so
n
p ARgs
p Arg
p Args
p Args
start
s
p Args
stack 32 -8
n
p Args
disas main
disassemble 
regs
p $rbp
p *$rbp
p *$rbp)
p *$(rbp)
p *(void *) 0x7fffffffdec0
p *(int *) 0x7fffffffdec0
start
s
stack 32 -8
p Args
p &Num
p 0x7fffffffddfc + 4
p /x0x7fffffffddfc + 4
p /x *(int*)(0x7fffffffddfc + 4)
p *(int*)(0x7fffffffddfc + 4)
p /x *(int*)(0x7fffffffddfc + 4)
repeat
rep

p /x *(int*)(0x7fffffffddfc + 4)
p /x **(int*)(0x7fffffffddfc + 4)
p /x **(int**)(0x7fffffffddfc + 4)
p /x &Num
q
ls
ls
start
b main
c
s
p 1 2
p 1 
p {1,2,3,}
p {1,2,3}
p [1]
p $esp 
p $ebp
p /x $ebp
p /x $esp 
p /x $eip 
stack all
stack 
stack 
p VA_LIST
l __builtin_va_list 
l __builtin_va_list 
l __builtin_va_list 
q
start
b main
c
l va_list 
s
n
l Args
p Args
p *(int*)(0x7fffffffdec0 + 8)
p *(int*)(0x7fffffffdec0 + 8 + 8)
p *(int*)(0x7fffffffdec0 + 8 + 4)
p /x *(int*)(0x7fffffffdec0 + 8 + 4)
p /x *(int*)(0x7fffffffdec0 + 8 + 3)
p /x *(int*)(0x7fffffffdec0 + 8 + 2)
p /x *(int*)(0x7fffffffdec0 + 8 + 1)
p /x *(int*)(0x7fffffffdec0 + 8 + 0)
p /x *(int*)(0x7fffffffdec0 + 8 + 16)
p /x *(int*)(Args.reg_save_area)
p /x *(int*)(Args.reg_save_area+1)
p /x *(int*)(Args.reg_save_area+2)
p /x *(int*)(Args.reg_save_area+3)
p /x *(int*)(Args.reg_save_area+4)
p /x *(int*)(Args.reg_save_area+5)
p /x *(int*)(Args.reg_save_area+6)
p /x *(int*)(Args.reg_save_area+7)
p /x *(int*)(Args.reg_save_area+8)
p /x *(int*)(Args.reg_save_area+12)
p /x *(int*)(Args.reg_save_area+8)
p /x *(int*)(Args.reg_save_area + 8 + 8)
p /x *(int*)(Args.reg_save_area + 8 + 8 + 8)
p /x *(int*)(Args.reg_save_area + 8 + 8 + 8 + 8)
p /x *(int*)(Args.reg_save_area + 8 + 8 + 8 + 8 + 8)
p /x *(int*)(Args.reg_save_area + 8 + 8 + 8 + 8 + 8 +8)
p /x *(int*)(Args.reg_save_area + 8)
n
s
start
s
n
disassemble 
n
start
s
n
p $esp
p $ebp
p $ebp - $ebp
p -8768 - -8528
p -8768 - -8528
p -8768 - -8528
p -8768 + 240
p /x -8768 + 240
p /x -8768 - 240
p $Num
p &Num
p Args 
p $esp
p $ebp

p /x $ebp
p /x $esp
p /x $esp - 120
p /x $esp + 120
p /x $ebp 
p /x $esp
p 0xffffddc0 + 120
p 0xffffddc0 + 120 /x
p /x 0xffffddc0 + 120 
p /x 0xffffddc0 + 120 + 8
p Args 
p 0xffffddc0 + 120 /x
p /x 0xffffddc0 + 120
p /x 0xffffddc0 + 120 + 120
p /x 0xffffddc0 + 60
p /x 0xffffddc0 + 120
p Args 
p /x 0xffffddc0 + 120
p 0x38
start
s
l
n
set disassemble-next-line 
set disassemble-next-line on
si
p $rbp
p 0x7fffffffdeb0 - 0xcc
x 0x7fffffffdeb0 - 0xcc
p 0x7fffffffdeb0 - 0xcc
0x7fffffffdeb0 - 0xcc
x 0x7fffffffdeb0 - 0xcc
x 0x7fffffffdeb0 - 0xcc
si
x 0x7fffffffdeb0 - 0xcc
p $rbp + 0x10
x $rbp + 0x10
s
start
s
s
set disassemble-next-line on
p $Args
p &Args
p $rbp
p Args
si
p Args
p &Args.gp_offset 
p $rbp
p $rbp - 0xd0
si
p Args
si
p Args
display Args 
si
si
si
q
tip
tips
t
show 
tips
pwndbg 
pwd
pwndbg 
bash
pwndbg 
less
pwndbg | less
pwndbg  less
pwndbg less
pwndbg ls
pwndbg ls
pwndbg tls
pwndbg d
pwndbg dd

pwndbg bb
pwndbg b
pwndbg .
pwndbg 
pwndbg ver
versions
version 
start
b main
c
ls
l
s
q
